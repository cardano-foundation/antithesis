FROM docker.io/debian:stable-slim AS build

ARG CARDANO_NODE_VERSION="${CARDANO_NODE_VERSION:-10.2.1}"
ARG UV_VERSION="${UV_VERSION:-0.6.11}"

# Set time zone
ENV TZ="UTC"
RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone

# Install packages required in build stage
RUN apt update && \
    apt install -y --no-install-recommends \
        ca-certificates \
        curl \
        git \
        tar

# Create cardano-node source directory
RUN install --directory --owner=root --group=root --mode=0755 /usr/local/src/cardano-node

# Download cardano-node archive
RUN curl --proto '=https' --tlsv1.2 \
        --location https://github.com/IntersectMBO/cardano-node/releases/download/${CARDANO_NODE_VERSION}/cardano-node-${CARDANO_NODE_VERSION}-linux.tar.gz \
        --output /usr/local/src/cardano-node/cardano-node-${CARDANO_NODE_VERSION}-linux.tar.gz

# Create cardano-node version directory
RUN install --directory --owner=root --group=root --mode=0755 /usr/local/src/cardano-node/${CARDANO_NODE_VERSION}

# Unarchive cardano-node tarball
RUN tar --extract --gzip --file=/usr/local/src/cardano-node/cardano-node-${CARDANO_NODE_VERSION}-linux.tar.gz --directory=/usr/local/src/cardano-node/${CARDANO_NODE_VERSION}

# Make cardano-cli executable
RUN chmod 0755 /usr/local/src/cardano-node/${CARDANO_NODE_VERSION}/bin/cardano-cli \
        /usr/local/src/cardano-node/${CARDANO_NODE_VERSION}/bin/cardano-node

# Create cardano-cli symlink
RUN ln -s /usr/local/src/cardano-node/${CARDANO_NODE_VERSION}/bin/cardano-cli /usr/local/bin/cardano-cli && \
    ln -s /usr/local/src/cardano-node/${CARDANO_NODE_VERSION}/bin/cardano-node /usr/local/bin/cardano-node

# Create uv source directory
RUN install --directory --owner=root --group=root --mode=0755 /usr/local/src/uv

# Download uv archive
RUN curl --proto '=https' --tlsv1.2 \
        --location https://github.com/astral-sh/uv/releases/download/${UV_VERSION}/uv-x86_64-unknown-linux-gnu.tar.gz \
        --output /usr/local/src/uv/uv-x86_64-unknown-linux-gnu.tar.gz

# Download uv checksum
RUN curl --proto '=https' --tlsv1.2 \
        --location https://github.com/astral-sh/uv/releases/download/${UV_VERSION}/uv-x86_64-unknown-linux-gnu.tar.gz.sha256 \
        --output /usr/local/src/uv/uv-x86_64-unknown-linux-gnu.tar.gz.sha256

# Verify uv checksum
WORKDIR /usr/local/src/uv
RUN sha256sum --ignore-missing --check uv-x86_64-unknown-linux-gnu.tar.gz.sha256

# Unarchive uv tarball
RUN tar --extract --gzip --file=/usr/local/src/uv/uv-x86_64-unknown-linux-gnu.tar.gz --directory=/usr/local/src/uv

# Make uv executable
RUN chmod 0755 /usr/local/src/uv/uv-x86_64-unknown-linux-gnu/uv

# Create uv symlink
RUN ln -s /usr/local/src/uv/uv-x86_64-unknown-linux-gnu/uv /usr/local/bin/uv

# Clone testnet-generation-tool.git repository
WORKDIR /usr/local/src
RUN git clone --branch main https://github.com/cardano-foundation/testnet-generation-tool.git

# Download testnet-generation-tool dependencies
WORKDIR /usr/local/src/testnet-generation-tool
RUN uv sync

# Copy testnet.yaml specification
COPY --chown=root:root .testnet.yaml /usr/local/src/testnet-generation-tool/testnet.yaml

# Build testnet configuration files
RUN uv run python3 genesis-cli.py testnet.yaml -o /tmp/testnet -c generate

# Remove dynamic topology.json
RUN find /tmp/testnet -type f -name 'topology.json' -exec rm -f '{}' ';'

#---------------------------------------------------------------------

FROM docker.io/debian:stable-slim AS main

# Set environment variables
ENV CARDANO_NODE_SOCKET_PATH="/opt/cardano-node/data/db/node.socket"

# Set time zone
ENV TZ="UTC"
RUN ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime && \
    echo ${TZ} > /etc/timezone

# Install packages required in main stage
RUN apt update && \
    apt install -y --no-install-recommends \
        curl \
        dnsutils \
        iproute2 \
        iputils-ping \
        jq \
        less \
        lsof \
        netbase \
        netcat-openbsd \
        openssl \
        procps \
        tcpdump \
        telnet \
        vim

# Copy binaries from build stage
COPY --from=build --chown=root:root /usr/local/bin/cardano-cli /usr/local/bin/cardano-cli
COPY --from=build --chown=root:root /usr/local/bin/cardano-node /usr/local/bin/cardano-node

# Create cardano group and user
RUN groupadd --gid 10000 cardano && \
    useradd --comment 'cardano' --create-home --gid 10000 --password '!' --shell '/bin/bash' --uid 10000 cardano

# Create cardano-node directories
RUN install --directory --owner=root --group=root --mode=0755 /opt/cardano-node && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/config && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/data && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/data/db && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/log && \
    install --directory --owner=cardano --group=cardano --mode=0750 /opt/cardano-node/pools

# Copy pool config and key material
COPY --from=build --chown=cardano:cardano /tmp/testnet/pools /opt/cardano-node/pools
COPY --from=build --chown=cardano:cardano /tmp/testnet/utxos /opt/cardano-node/utxos

# Copy canary_tx.sh
COPY canary_tx.sh /
RUN chmod 0755 /canary_tx.sh

# Copy cardano-node.sh
COPY cardano-node.sh /
RUN chmod 0755 /cardano-node.sh

USER cardano
#STOPSIGNAL SIGINT

CMD ["/cardano-node.sh"]
