# shellcheck shell=bash

# shellcheck disable=SC2121
set unstable := true

format:
    #!/usr/bin/env bash
    # shellcheck disable=SC2034
    for i in {1..3}; do
        fourmolu -i src app test test-E2E test-integration test-lib CI/rewrite-libs
    done
    cabal-fmt -i anti.cabal CI/rewrite-libs/rewrite-libs.cabal
    nixfmt *.nix
    nixfmt nix/*.nix
    nixfmt CI/rewrite-libs/*.nix
    nixfmt CI/rewrite-libs/nix/*.nix

hlint:
    #!/usr/bin/env bash
    hlint app src test test-E2E test-lib CI/rewrite-libs

unit match="":
    #!/usr/bin/env bash
    # shellcheck disable=SC2050
    if [[ '{{ match }}' == "" ]]; then
      cabal test anti-unit-test \
          --test-show-details=direct
    else
      cabal test anti-unit-test\
          --test-show-details=direct \
          --test-option=--match \
          --test-option="{{ match }}"
    fi

build:
    #!/usr/bin/env bash
    cabal build all --enable-tests

integration match="":
    #!/usr/bin/env bash
    # shellcheck disable=SC2050
    if [[ '{{ match }}' == "" ]]; then
      cabal test anti-integration-test \
          --test-show-details=direct
    else
      cabal test anti-integration-test \
          --test-show-details=direct \
          --test-option=--match \
          --test-option="{{ match }}"
    fi
E2E match="":
    #!/usr/bin/env bash
    mkdir -p tmp/bin
    if [ -z "${ANTI_GITHUB_PAT:-}" ]; then
        echo "Please set ANTI_GITHUB_PAT environment variable, this is a valid GitHub personal access token with access to the public github API"
        exit 1
    fi
    if [ -z "${ANTI_SSH_PASSWORD:-}" ]; then
        echo "Please set ANTI_SSH_PASSWORD environment variable, this is the passphrase for the cfhal encrypted SSH private key"
        exit 1
    fi
    if ! test -f  tmp/test.json; then
        echo "E2E tests expect wallet definition in tmp/test.json file"
        exit 1
    fi
    cabal install --overwrite-policy=always --installdir=tmp >/dev/null
    export PATH="$PWD/tmp:$PATH"
    randomMPFSPort=$(shuf -i 1024-65636 -n 1)
    export ANTI_MPFS_HOST="http://localhost:$randomMPFSPort"
    export MPFS_PORT="$randomMPFSPort"
    randomYaciAdminPort=$(shuf -i 1024-65536 -n 1)
    export YACI_ADMIN_PORT="$randomYaciAdminPort"
    export ANTI_TEST_YACI_ADMIN="http://localhost:$YACI_ADMIN_PORT"

    # shellcheck disable=SC2002
    randomName=$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 8 | head -n 1)
    docker compose -p "$randomName" -f test-E2E/fixtures/docker-compose.yml up -d
    down() {
      docker compose -p "$randomName" \
        -f test-E2E/fixtures/docker-compose.yml down
    }
    trap down EXIT INT

    export ANTI_WALLET_FILE=tmp/test.json
    export ANTI_TEST_REQUESTER_WALLET=tmp/test.json
    export ANTI_TEST_ORACLE_WALLET=tmp/test.json
    export ANTI_TEST_AGENT_WALLET=tmp/test.json
    export ANTI_SSH_FILE=test-E2E/fixtures/cfhal_ed25519
    export ANTI_WAIT=2
    while [[ "$(curl -s "localhost:$MPFS_PORT/tokens" | jq -r '.indexerStatus.ready')" != "true" ]]; do
        echo "Waiting for indexer to be ready..."
        sleep 2
    done
    address=$(anti wallet info | jq -r '.address')
    echo "Funding address: $address"
    topup(){
        curl -s -X 'POST' \
            "$ANTI_TEST_YACI_ADMIN/local-cluster/api/addresses/topup" \
            -H 'accept: */*' \
            -H 'Content-Type: application/json' \
            -d '{
            "address": "'"$address"'",
            "adaAmount": 10000
            }'
        }
    while true; do
        if topup | grep -q "Topup successful"; then
            break
        fi
        echo "Retrying topup..."
        sleep 2
    done
    owner=$(anti wallet info | jq -r '.owner')
    export ANTI_AGENT_PUBLIC_KEY_HASH=$owner
    echo "Starting E2E tests..."
    just E2E-tests "{{ match }}"

E2E-tests match="":
    #!/usr/bin/env bash
    # shellcheck disable=SC2050
    if [[ '{{ match }}' == "" ]]; then
    cabal test anti-E2E-test \
        --test-show-details=direct
    else
    cabal test anti-E2E-test \
        --test-show-details=direct \
        --test-option=--match \
        --test-option="{{ match }}"
    fi

CI:
    #!/usr/bin/env bash
    set -euo pipefail
    just build
    just unit
    just integration
    just E2E
    cabal-fmt -c anti.cabal CI/rewrite-libs/rewrite-libs.cabal
    fourmolu -m check src app test CI/rewrite-libs
    hlint -c src app test CI/rewrite-libs

start-mpfs:
    #!/usr/bin/env bash
    docker compose -p "anti-testing" -f test-E2E/fixtures/docker-compose.yml up -d

stop-mpfs:
    #!/usr/bin/env bash
    docker compose -p "anti-testing" -f test-E2E/fixtures/docker-compose.yml down

build-anti-agent:
    #!/usr/bin/env bash
    nix build .#anti-agent-docker-image
    docker load < result
    version=$(nix eval --raw .#version)
    docker image tag cardano-foundation/anti-agent:"$version" cardano-foundation/anti-agent:latest

start-anti-agent bg="false":
    #!/usr/bin/env bash
    # shellcheck disable=SC2050
    if [[ '{{ bg }}' == "true" ]]; then
        docker compose -f CD/anti-agent/docker-compose.yaml up -d
    else
        docker compose -f CD/anti-agent/docker-compose.yaml up
    fi

build-and-start-anti-agent bg="false":
    #!/usr/bin/env bash
    just build-anti-agent
    just start-anti-agent "{{ bg }}"

logs-anti-agent:
    #!/usr/bin/env bash
    docker compose -f CD/anti-agent/docker-compose.yaml logs -ft

start-anti-oracle bg="false":
    #!/usr/bin/env bash
     nix build .#anti-oracle-docker-image
    docker load < result
    version=$(nix eval --raw .#version)
    docker image tag cardano-foundation/anti-oracle:"$version" cardano-foundation/anti-oracle:latest
    # shellcheck disable=SC2050
    if [[ '{{ bg }}' == "true" ]]; then
        docker compose -f CD/anti-oracle/docker-compose.yaml up -d
    else
        docker compose -f CD/anti-oracle/docker-compose.yaml up
    fi

logs-anti-oracle:
    #!/usr/bin/env bash
    docker compose -f CD/anti-oracle/docker-compose.yaml logs -ft
